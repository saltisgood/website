<?php
/**
 * Created by BlogBuilder
 * Which was created by Nick Stephen
 * TITLE: Pretty C++ Templates
 * SUBTITLE: Separation of Interface and Implementation
 * DESC: The simple way to remove the implementation of your C++ Templates from their class definitions.
 * TAGS: C++;Templates;
 */

$this->content[] = (new Section('C++ Templates'))
    ->addParagraph(new Paragraph('Templates are wonderful things. They allow us to create strongly typed but reusable collections, generate efficient function definitions and perform static type analysis, to name but a few uses.'))
    ->addParagraph(new Paragraph('They\'re also bloody annoying. Overly verbose, sometimes complicated and will spit out incredibly cryptic error messages if you mess something up.'))
    ->addParagraph(new Paragraph('That said, sometimes they\'re just the right tools for the job so you\'d better learn to use them.'))
;

$this->content[] = (new Section('Location Location Location'))
    ->addParagraph(new Paragraph('One thing you\'ll learn pretty soon about templates in C++ is that they are almost always written entirely in header files. The reason for this is that whenever you use a template the compiler instantiates a new copy of the class/function and so it requires a definition of the methods or function. If the function is defined inside a different source file then the definition isn\'t available (unless of course you are #including that source file, in which case prepare for plenty more errors). Because of this, the typical solution is to simply declare and implement functions at the same time. That\'s certainly what Microsoft does:'))
    ->addParagraph((new ImageSection(ImageSection::BLOCK))
            ->addImage((new Image('img/AF1701-forward-list.png', 515, 619))
                    ->setAltText('The VS implementation of std::forward_list')->setCaption('The VS implementation of std::forward_list')
            )
    )
    ->addParagraph(new Paragraph('Declaration and definition in one place and it\'s a mess to look at. Microsoft isn\'t particularly concerned about this because you don\'t normally read this code. This is their implementation of the standard library so you should only be using the facilities as documented by the C++ standard, which is so nicely represented by <a href="http://www.cplusplus.com/reference/">other people</a>.'))
;

$this->content[] = (new Section('There Must Be A Better Way'))
    ->addParagraph(new Paragraph('And thankfully there is! The only requirement for templates to work is that they remain accessible to the compiler, not that they have to reside inside the class/function declaration. This gives a little flexibility, not much but a little. If you want the template to truly be general and be available for any template argument now and in the future without modification then the template must be fully defined before the end of the header file. However, if you only want or need the template to work for a few select arguments then you can defer the definitions to a source file.'))
;

$this->content[] = (new Section('Templates In a Source File'))
    ->addParagraph((new SubSection('Usage Case:'))
    )
    ->addParagraph((new ListHTML())
            ->setOrdered(False)
            ->addItem('Small/ Fixed number of template arguments')
    )
    ->addParagraph((new SubSection('Pros:'))
    )
    ->addParagraph((new ListHTML())
            ->setOrdered(False)
            ->addItem('Can hide implementation in source file')
            ->addItem('No need to fully recompile program upon implementation change')
    )
    ->addParagraph((new SubSection('Cons:'))
    )
    ->addParagraph((new ListHTML())
            ->setOrdered(False)
            ->addItem('Unsuitable for library code as every possible argument must be explicitly declared at the same time as the definitions')
    )
    ->addParagraph((new SubSection('Implementation:'))
    )
    ->addParagraph((new CodeBlock('File: Example.h'))
            ->addLine('<span class="code-b">namespace</span> ex')
            ->addLine('{ ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-b">template</span> &lt;<span class="code-b">typename</span> <span class="code-lb">T</span>&gt; ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-b">class</span> <span class="code-lb">Foo</span>')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;{ ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-b">public:</span> ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Foo(); ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Foo(<span class="code-b">const</span> <span class="code-lb">Foo</span>&lt;<span class="code-lb">T</span>&gt;  &); ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-b">int</span> doSomething(); ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-b">template</span> &lt;<span class="code-b">typename</span> <span class="code-lb">U</span>&gt; ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-lb">U</span> paramDo(); ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;}; ')
            ->addLine('')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-b">template</span> &lt;<span class="code-b">typename</span> <span class="code-lb">T</span>, <span class="code-b">typename</span> <span class="code-lb">U</span>&gt; ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-lb">U</span> func(<span class="code-lb">T</span> param); ')
            ->addLine('} ')
    )
    ->addParagraph((new CodeBlock('File: Example.cpp'))
            ->addLine('<span class="code-b">#include</span> <span class="code-r">"Example.h"</span>')
            ->addLine('')
            ->addLine('<span class="code-b">using</span> <span class="code-b">namespace</span> ex;')
            ->addLine('')
            ->addLine('<span class="code-b">template</span> &lt;<span class="code-b">typename</span> <span class="code-lb">T</span>&gt; ')
            ->addLine('<span class="code-lb">Foo</span>&lt;<span class="code-lb">T</span>&gt;::Foo()')
            ->addLine('{} ')
            ->addLine('')
            ->addLine('<span class="code-b">template</span> &lt;<span class="code-b">typename</span> <span class="code-lb">T</span>&gt; ')
            ->addLine('<span class="code-lb">Foo</span>&lt;<span class="code-lb">T</span>&gt;::Foo(<span class="code-b">const</span> <span class="code-lb">Foo</span>&lt;<span class="code-lb">T</span>&gt;  &cpy) ')
            ->addLine('{} ')
            ->addLine('')
            ->addLine('<span class="code-b">template</span> &lt;<span class="code-b">typename</span> <span class="code-lb">T</span>&gt; ')
            ->addLine('<span class="code-b">int</span> <span class="code-lb">Foo</span>&lt;<span class="code-lb">T</span>&gt;::doSomething()')
            ->addLine('{} ')
            ->addLine('')
            ->addLine('<span class="code-b">template</span> &lt;<span class="code-b">typename</span> <span class="code-lb">T</span>&gt; ')
            ->addLine('<span class="code-b">template</span> &lt;<span class="code-b">typename</span> <span class="code-lb">U</span>&gt; ')
            ->addLine('<span class="code-lb">U</span> <span class="code-lb">Foo</span>&lt;<span class="code-lb">T</span>&gt;::paramDo&lt;<span class="code-lb">U</span>&gt;() ')
            ->addLine('{} ')
            ->addLine('')
            ->addLine('<span class="code-b">template</span> &lt;<span class="code-b">typename</span> <span class="code-lb">T</span>, <span class="code-b">typename</span> <span class="code-lb">U</span>&gt; ')
            ->addLine('<span class="code-lb">U</span> <span class="code-lb">ex</span>::func&lt;<span class="code-lb">T</span>, <span class="code-lb">U</span>&gt;(<span class="code-lb">T</span> param) ')
            ->addLine('{} ')
            ->addLine('')
            ->addLine('<span class="code-g">// </span><span class="code-g">Explicit </span><span class="code-g">Instantiations </span>')
            ->addLine('<span class="code-b">template</span> <span class="code-b">class</span> <span class="code-lb">Foo</span>&lt;<span class="code-b">int</span>&gt; ')
            ->addLine('<span class="code-b">template</span> <span class="code-b">class</span> <span class="code-lb">Foo</span>&lt;<span class="code-b">float</span>&gt; ')
            ->addLine('<span class="code-b">template</span> <span class="code-b">class</span> <span class="code-lb">Foo</span>&lt;<span class="code-lb">Bar</span>&gt; ')
            ->addLine('')
            ->addLine('<span class="code-b">template</span> <span class="code-b">int</span> <span class="code-lb">ex</span>::func&lt;<span class="code-b">int</span>, <span class="code-b">float</span>&gt;(<span class="code-b">float</span>);')
            ->addLine('<span class="code-b">template</span> <span class="code-lb">Foo</span> <span class="code-lb">ex</span>::func&lt;<span class="code-lb">Foo</span>, <span class="code-lb">Bar</span>&gt;(<span class="code-lb">Bar</span>);')
    )
    ->addParagraph((new SubSection('Explanation:'))
            ->addLine('Pretty straightforward really. The method definitions just have template <typename T> prepended and the parameter is then placed into the method signature. Other than that they\'re no different from normal method definitions.')
            ->addLine('The only strange one is method: paramDo(). paramDo() has the original template parameter of T which is for its surrounding class Foo, but it also has a second type parameter unique to it. For this reason there are 2 separate template declarations and the second parameter is placed at the end of the method name. You can\'t put both type parameters into a single template declaration unfortunately since they refer to 2 different instantiations. You can do it for the standalone template function as this uses both parameters at once.')
            ->addLine('Finally there are the template instantiations. These are identical and analogous to forward declarations, save for the prefix: template.')
            ->addLine('With this setup you can use any of these templates in any other part of the program as long as you include Example.h and the template arguments are one of those stated explicitly in Example.cpp. If you attempt to use one with an argument not explicitly stated then this will cause a linker error.')
            ->addLine('Note: The only reason for the namespace here is to make sure that the standalone function gets properly attached to the declaration in the header.')
    )
;

$this->content[] = (new Section('Templates in Headers'))
    ->addParagraph(new Paragraph('This is my recommended solution.'))
    ->addParagraph((new SubSection('Usage Case:'))
    )
    ->addParagraph((new ListHTML())
            ->setOrdered(False)
            ->addItem('Whenever you need a general template')
    )
    ->addParagraph((new SubSection('Pros:'))
    )
    ->addParagraph((new ListHTML())
            ->setOrdered(False)
            ->addItem('Allows any template arguments')
    )
    ->addParagraph((new SubSection('Cons:'))
    )
    ->addParagraph((new ListHTML())
            ->setOrdered(False)
            ->addItem('Implementation is fully exposed')
    )
    ->addParagraph((new SubSection('Implementation:'))
    )
    ->addParagraph((new CodeBlock('File: Example.h'))
            ->addLine('<span class="code-b">namespace</span> ex')
            ->addLine('{ ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-b">template</span> &lt;<span class="code-b">typename</span> <span class="code-lb">T</span>&gt; ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-b">class</span> <span class="code-lb">Foo</span>')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;{ ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-b">public:</span> ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Foo(); ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Foo(<span class="code-b">const</span> <span class="code-lb">Foo</span>&lt;<span class="code-lb">T</span>&gt;  &); ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-b">int</span> doSomething(); ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-b">template</span> &lt;<span class="code-b">typename</span> <span class="code-lb">U</span>&gt; ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-lb">U</span> paramDo(); ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;}; ')
            ->addLine('')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-b">template</span> &lt;<span class="code-b">typename</span> <span class="code-lb">T</span>, <span class="code-b">typename</span> <span class="code-lb">U</span>&gt; ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-lb">U</span> func(<span class="code-lb">T</span> param); ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;')
            ->addLine('<span class="code-b">#pragma</span> <span class="code-b">region</span> Implementations ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-b">template</span> &lt;<span class="code-b">typename</span> <span class="code-lb">T</span>&gt; ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-lb">Foo</span>&lt;<span class="code-lb">T</span>&gt;::Foo()')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;{} ')
            ->addLine('')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-b">template</span> &lt;<span class="code-b">typename</span> <span class="code-lb">T</span>&gt; ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-lb">Foo</span>&lt;<span class="code-lb">T</span>&gt;::Foo(<span class="code-b">const</span> <span class="code-lb">Foo</span>&lt;<span class="code-lb">T</span>&gt;  &cpy) ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;{} ')
            ->addLine('')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-b">template</span> &lt;<span class="code-b">typename</span> <span class="code-lb">T</span>&gt; ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-b">int</span> <span class="code-lb">Foo</span>&lt;<span class="code-lb">T</span>&gt;::doSomething()')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;{} ')
            ->addLine('')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-b">template</span> &lt;<span class="code-b">typename</span> <span class="code-lb">T</span>&gt; ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-b">template</span> &lt;<span class="code-b">typename</span> <span class="code-lb">U</span>&gt; ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-lb">U</span> <span class="code-lb">Foo</span>&lt;<span class="code-lb">T</span>&gt;::paramDo&lt;<span class="code-lb">U</span>&gt;() ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;{} ')
            ->addLine('')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-b">template</span> &lt;<span class="code-b">typename</span> <span class="code-lb">T</span>, <span class="code-b">typename</span> <span class="code-lb">U</span>&gt; ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-lb">U</span> <span class="code-lb">func</span>&lt;<span class="code-lb">T</span>, <span class="code-lb">U</span>&gt;(<span class="code-lb">T</span> param) ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;{} ')
            ->addLine('&nbsp;&nbsp;&nbsp;&nbsp;')
            ->addLine('<span class="code-b">#pragma</span> <span class="code-b">endregion</span> ')
            ->addLine('} ')
    )
    ->addParagraph((new SubSection('Explanation:'))
            ->addLine('As you can see, the syntax is identical to the previous case, it\'s just appended to the end of the header. If you really don\'t want the implementations written in the same file then you can create another file, say Example.hpp, put the definitions in there and then #include that file from the bottom of Example.h. I prefer to skip that though and wrap the implementations in a #pragma region, which in Visual Studio folds away the code. Either way, the full definitions MUST be included somehow in any translation unit in which the header is included.')
    )
;

$this->content[] = (new Section('Wrap Up'))
    ->addParagraph(new Paragraph('These are 2 very easy ways of having your own templates but not having to wade through code to figure out how to use them. Give it a go and check out how it cleans up your code. I guarantee you\'ll thank yourself later.'))
;

